ExecStack
CompStmt{first=AssignStmt{expr=ConstantExpression{value=0}, var='v'}, second=CompStmt{first=WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}, second=CompStmt{first=domain.statements.SleepStmt@68d177b2, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}}}
SymbolTable
Output
Heap
ExecStack
CompStmt{first=WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}, second=CompStmt{first=domain.statements.SleepStmt@68d177b2, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}}
AssignStmt{expr=ConstantExpression{value=0}, var='v'}
SymbolTable
Output
Heap
ExecStack
CompStmt{first=WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}, second=CompStmt{first=domain.statements.SleepStmt@68d177b2, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@68d177b2, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@68d177b2, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@68d177b2, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@68d177b2, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@68d177b2, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
print( VarExpression{name='v'} )
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@68d177b2, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
SymbolTable
v-->0
Output
null
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@68d177b2, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->1
Output
null
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@68d177b2, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->1
Output
null
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@68d177b2, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->1
Output
null
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@68d177b2, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
SymbolTable
v-->1
Output
null
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@68d177b2, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
print( VarExpression{name='v'} )
SymbolTable
v-->1
Output
null
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@68d177b2, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
SymbolTable
v-->1
Output
null
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@68d177b2, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->2
Output
null
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@68d177b2, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->2
Output
null
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@68d177b2, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->2
Output
null
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@68d177b2, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
SymbolTable
v-->2
Output
null
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@68d177b2, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
print( VarExpression{name='v'} )
SymbolTable
v-->2
Output
null
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@68d177b2, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
SymbolTable
v-->2
Output
null
0
1
1
2
2
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@68d177b2, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->3
Output
null
0
1
1
2
2
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@68d177b2, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
SymbolTable
v-->3
Output
null
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@68d177b2
SymbolTable
v-->3
Output
null
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@22f02b43
SymbolTable
v-->3
Output
null
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@43199bac
SymbolTable
v-->3
Output
null
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@7b2f8e35
SymbolTable
v-->3
Output
null
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@56024589
SymbolTable
v-->3
Output
null
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@18f9f782
SymbolTable
v-->3
Output
null
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
SymbolTable
v-->3
Output
null
0
1
1
2
2
Heap
ExecStack
CompStmt{first=AssignStmt{expr=ConstantExpression{value=0}, var='v'}, second=CompStmt{first=WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}, second=CompStmt{first=domain.statements.SleepStmt@73e634e9, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}}}
SymbolTable
Output
Heap
ExecStack
CompStmt{first=WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}, second=CompStmt{first=domain.statements.SleepStmt@73e634e9, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}}
AssignStmt{expr=ConstantExpression{value=0}, var='v'}
SymbolTable
Output
Heap
ExecStack
CompStmt{first=WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}, second=CompStmt{first=domain.statements.SleepStmt@73e634e9, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@73e634e9, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=AssignStmt{expr=ConstantExpression{value=0}, var='v'}, second=CompStmt{first=WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}, second=CompStmt{first=domain.statements.SleepStmt@26f67b76, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}}}
SymbolTable
Output
Heap
ExecStack
CompStmt{first=WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}, second=CompStmt{first=domain.statements.SleepStmt@26f67b76, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}}
AssignStmt{expr=ConstantExpression{value=0}, var='v'}
SymbolTable
Output
Heap
ExecStack
CompStmt{first=WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}, second=CompStmt{first=domain.statements.SleepStmt@26f67b76, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@26f67b76, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@26f67b76, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@26f67b76, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@26f67b76, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@26f67b76, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
print( VarExpression{name='v'} )
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@26f67b76, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
SymbolTable
v-->0
Output
0
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@26f67b76, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->1
Output
0
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@26f67b76, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->1
Output
0
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@26f67b76, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->1
Output
0
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@26f67b76, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
SymbolTable
v-->1
Output
0
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@26f67b76, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
print( VarExpression{name='v'} )
SymbolTable
v-->1
Output
0
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@26f67b76, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
SymbolTable
v-->1
Output
0
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@26f67b76, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->2
Output
0
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@26f67b76, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->2
Output
0
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@26f67b76, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->2
Output
0
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@26f67b76, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
SymbolTable
v-->2
Output
0
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@26f67b76, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
print( VarExpression{name='v'} )
SymbolTable
v-->2
Output
0
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@26f67b76, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
SymbolTable
v-->2
Output
0
0
1
1
2
2
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@26f67b76, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@26f67b76, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@26f67b76
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@5056dfcb
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@6574b225
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@2669b199
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@2344fc66
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@458ad742
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
CompStmt{first=AssignStmt{expr=ConstantExpression{value=0}, var='v'}, second=CompStmt{first=WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}, second=CompStmt{first=domain.statements.SleepStmt@b4c966a, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}}}
SymbolTable
Output
Heap
ExecStack
CompStmt{first=WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}, second=CompStmt{first=domain.statements.SleepStmt@b4c966a, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}}
AssignStmt{expr=ConstantExpression{value=0}, var='v'}
SymbolTable
Output
Heap
ExecStack
CompStmt{first=WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}, second=CompStmt{first=domain.statements.SleepStmt@b4c966a, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}}
AssignStmt{expr=ConstantExpression{value=0}, var='v'}
SymbolTable
Output
Heap
ExecStack
CompStmt{first=WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}, second=CompStmt{first=domain.statements.SleepStmt@b4c966a, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}, second=CompStmt{first=domain.statements.SleepStmt@b4c966a, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@b4c966a, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@b4c966a, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@b4c966a, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@b4c966a, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@b4c966a, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@b4c966a, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@b4c966a, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@b4c966a, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@b4c966a, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
print( VarExpression{name='v'} )
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@b4c966a, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
print( VarExpression{name='v'} )
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@b4c966a, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
SymbolTable
v-->0
Output
null
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@b4c966a, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
SymbolTable
v-->0
Output
null
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@b4c966a, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->1
Output
null
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@b4c966a, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->1
Output
null
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@b4c966a, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->1
Output
null
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@b4c966a, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->1
Output
null
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@b4c966a, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->1
Output
null
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@b4c966a, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->1
Output
null
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@b4c966a, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
SymbolTable
v-->1
Output
null
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@b4c966a, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
SymbolTable
v-->1
Output
null
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@b4c966a, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
print( VarExpression{name='v'} )
SymbolTable
v-->1
Output
null
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@b4c966a, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
print( VarExpression{name='v'} )
SymbolTable
v-->1
Output
null
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@b4c966a, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
SymbolTable
v-->1
Output
null
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@b4c966a, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
SymbolTable
v-->1
Output
null
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@b4c966a, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->2
Output
null
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@b4c966a, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->2
Output
null
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@b4c966a, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->2
Output
null
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@b4c966a, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->2
Output
null
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@b4c966a, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->2
Output
null
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@b4c966a, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->2
Output
null
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@b4c966a, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
SymbolTable
v-->2
Output
null
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@b4c966a, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
SymbolTable
v-->2
Output
null
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@b4c966a, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
print( VarExpression{name='v'} )
SymbolTable
v-->2
Output
null
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@b4c966a, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
print( VarExpression{name='v'} )
SymbolTable
v-->2
Output
null
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@b4c966a, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
SymbolTable
v-->2
Output
null
0
1
1
2
2
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@b4c966a, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
SymbolTable
v-->2
Output
null
0
1
1
2
2
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@b4c966a, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->3
Output
null
0
1
1
2
2
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@b4c966a, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->3
Output
null
0
1
1
2
2
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@b4c966a, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
SymbolTable
v-->3
Output
null
0
1
1
2
2
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@b4c966a, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
SymbolTable
v-->3
Output
null
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@b4c966a
SymbolTable
v-->3
Output
null
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@b4c966a
SymbolTable
v-->3
Output
null
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@312b1dae
SymbolTable
v-->3
Output
null
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@312b1dae
SymbolTable
v-->3
Output
null
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@7530d0a
SymbolTable
v-->3
Output
null
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@7530d0a
SymbolTable
v-->3
Output
null
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@27bc2616
SymbolTable
v-->3
Output
null
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@27bc2616
SymbolTable
v-->3
Output
null
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@3941a79c
SymbolTable
v-->3
Output
null
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@3941a79c
SymbolTable
v-->3
Output
null
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@506e1b77
SymbolTable
v-->3
Output
null
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@506e1b77
SymbolTable
v-->3
Output
null
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
SymbolTable
v-->3
Output
null
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
SymbolTable
v-->3
Output
null
0
1
1
2
2
Heap
ExecStack
SymbolTable
v-->3
Output
null
0
1
1
2
2
30
Heap
ExecStack
CompStmt{first=AssignStmt{expr=ConstantExpression{value=0}, var='v'}, second=CompStmt{first=WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}, second=CompStmt{first=domain.statements.SleepStmt@68d177b2, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}}}
SymbolTable
Output
Heap
ExecStack
CompStmt{first=WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}, second=CompStmt{first=domain.statements.SleepStmt@68d177b2, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}}
AssignStmt{expr=ConstantExpression{value=0}, var='v'}
SymbolTable
Output
Heap
ExecStack
CompStmt{first=WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}, second=CompStmt{first=domain.statements.SleepStmt@68d177b2, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@68d177b2, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@68d177b2, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@68d177b2, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@68d177b2, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@68d177b2, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
print( VarExpression{name='v'} )
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@68d177b2, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
SymbolTable
v-->0
Output
null
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@68d177b2, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->1
Output
null
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@68d177b2, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->1
Output
null
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@68d177b2, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->1
Output
null
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@68d177b2, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
SymbolTable
v-->1
Output
null
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@68d177b2, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
print( VarExpression{name='v'} )
SymbolTable
v-->1
Output
null
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@68d177b2, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
SymbolTable
v-->1
Output
null
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@68d177b2, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->2
Output
null
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@68d177b2, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->2
Output
null
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@68d177b2, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->2
Output
null
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@68d177b2, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
SymbolTable
v-->2
Output
null
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@68d177b2, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
print( VarExpression{name='v'} )
SymbolTable
v-->2
Output
null
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@68d177b2, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
SymbolTable
v-->2
Output
null
0
1
1
2
2
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@68d177b2, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->3
Output
null
0
1
1
2
2
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@68d177b2, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
SymbolTable
v-->3
Output
null
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@68d177b2
SymbolTable
v-->3
Output
null
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@3ebdcc9e
SymbolTable
v-->3
Output
null
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@50de4e23
SymbolTable
v-->3
Output
null
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@2d28bbe
SymbolTable
v-->3
Output
null
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@791987f2
SymbolTable
v-->3
Output
null
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@639d5828
SymbolTable
v-->3
Output
null
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
SymbolTable
v-->3
Output
null
0
1
1
2
2
Heap
ExecStack
CompStmt{first=AssignStmt{expr=ConstantExpression{value=0}, var='v'}, second=CompStmt{first=WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}, second=CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}}}
SymbolTable
Output
Heap
ExecStack
CompStmt{first=WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}, second=CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}}
AssignStmt{expr=ConstantExpression{value=0}, var='v'}
SymbolTable
Output
Heap
ExecStack
CompStmt{first=WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}, second=CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}}
AssignStmt{expr=ConstantExpression{value=0}, var='v'}
SymbolTable
Output
Heap
ExecStack
CompStmt{first=WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}, second=CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}, second=CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
print( VarExpression{name='v'} )
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
print( VarExpression{name='v'} )
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
SymbolTable
v-->0
Output
null
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
SymbolTable
v-->0
Output
null
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->1
Output
null
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->1
Output
null
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->1
Output
null
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->1
Output
null
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->1
Output
null
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->1
Output
null
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
SymbolTable
v-->1
Output
null
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
SymbolTable
v-->1
Output
null
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
print( VarExpression{name='v'} )
SymbolTable
v-->1
Output
null
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
print( VarExpression{name='v'} )
SymbolTable
v-->1
Output
null
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
SymbolTable
v-->1
Output
null
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
SymbolTable
v-->1
Output
null
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->2
Output
null
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->2
Output
null
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->2
Output
null
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->2
Output
null
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->2
Output
null
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->2
Output
null
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
SymbolTable
v-->2
Output
null
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
SymbolTable
v-->2
Output
null
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
print( VarExpression{name='v'} )
SymbolTable
v-->2
Output
null
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
print( VarExpression{name='v'} )
SymbolTable
v-->2
Output
null
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
SymbolTable
v-->2
Output
null
0
1
1
2
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
SymbolTable
v-->2
Output
null
0
1
1
2
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->3
Output
null
0
1
1
2
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->3
Output
null
0
1
1
2
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
SymbolTable
v-->3
Output
null
0
1
1
2
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
SymbolTable
v-->3
Output
null
0
1
1
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@2255809c
SymbolTable
v-->3
Output
null
0
1
1
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@2255809c
SymbolTable
v-->3
Output
null
0
1
1
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@5226f279
SymbolTable
v-->3
Output
null
0
1
1
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@5226f279
SymbolTable
v-->3
Output
null
0
1
1
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@267e099
SymbolTable
v-->3
Output
null
0
1
1
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@267e099
SymbolTable
v-->3
Output
null
0
1
1
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@68f02d11
SymbolTable
v-->3
Output
null
0
1
1
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@68f02d11
SymbolTable
v-->3
Output
null
0
1
1
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@18a012ef
SymbolTable
v-->3
Output
null
0
1
1
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@18a012ef
SymbolTable
v-->3
Output
null
0
1
1
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@11d12607
SymbolTable
v-->3
Output
null
0
1
1
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@11d12607
SymbolTable
v-->3
Output
null
0
1
1
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
SymbolTable
v-->3
Output
null
0
1
1
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
SymbolTable
v-->3
Output
null
0
1
1
2
Heap
ExecStack
SymbolTable
v-->3
Output
null
0
1
1
2
30
Heap
ExecStack
domain.statements.CallStmt@12843fce
SymbolTable
v-->2
w-->5
Output
25
2
Heap
ExecStack
domain.statements.ReturnStmt@458ad742
CompStmt{first=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='a'}, operator=*, operand2=VarExpression{name='b'}}, var='v'}, second=print( VarExpression{name='v'} )}
SymbolTable
a-->2
b-->5
Output
25
2
Heap
ExecStack
domain.statements.ReturnStmt@458ad742
print( VarExpression{name='v'} )
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='a'}, operator=*, operand2=VarExpression{name='b'}}, var='v'}
SymbolTable
a-->2
b-->5
Output
25
2
Heap
ExecStack
domain.statements.ReturnStmt@458ad742
print( VarExpression{name='v'} )
SymbolTable
a-->2
b-->5
v-->10
Output
25
2
Heap
ExecStack
domain.statements.ReturnStmt@458ad742
SymbolTable
a-->2
b-->5
v-->10
Output
25
2
10
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@26f67b76, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
SymbolTable
v-->1
Output
null
0
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@26f67b76
SymbolTable
v-->1
Output
null
0
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@5056dfcb
SymbolTable
v-->1
Output
null
0
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@6574b225
SymbolTable
v-->1
Output
null
0
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@2669b199
SymbolTable
v-->1
Output
null
0
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@2344fc66
SymbolTable
v-->1
Output
null
0
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@458ad742
SymbolTable
v-->1
Output
null
0
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
SymbolTable
v-->1
Output
null
0
Heap
ExecStack
CompStmt{first=AssignStmt{expr=ConstantExpression{value=0}, var='v'}, second=CompStmt{first=WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}, second=CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}}}
SymbolTable
Output
Heap
ExecStack
CompStmt{first=WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}, second=CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}}
AssignStmt{expr=ConstantExpression{value=0}, var='v'}
SymbolTable
Output
Heap
ExecStack
CompStmt{first=WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}, second=CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
print( VarExpression{name='v'} )
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
SymbolTable
v-->0
Output
null
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->1
Output
null
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->1
Output
null
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->1
Output
null
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
SymbolTable
v-->1
Output
null
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
print( VarExpression{name='v'} )
SymbolTable
v-->1
Output
null
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
SymbolTable
v-->1
Output
null
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->2
Output
null
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->2
Output
null
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->2
Output
null
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
SymbolTable
v-->2
Output
null
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2255809c, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
print( VarExpression{name='v'} )
SymbolTable
v-->2
Output
null
0
1
1
Heap
ExecStack
CompStmt{first=AssignStmt{expr=ConstantExpression{value=0}, var='v'}, second=CompStmt{first=WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}, second=CompStmt{first=domain.statements.SleepStmt@69c3c095, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}}}
SymbolTable
Output
Heap
ExecStack
CompStmt{first=WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}, second=CompStmt{first=domain.statements.SleepStmt@69c3c095, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}}
AssignStmt{expr=ConstantExpression{value=0}, var='v'}
SymbolTable
Output
Heap
ExecStack
CompStmt{first=WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}, second=CompStmt{first=domain.statements.SleepStmt@69c3c095, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@69c3c095, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@69c3c095, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@69c3c095, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@69c3c095, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@69c3c095, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
print( VarExpression{name='v'} )
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@69c3c095, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
SymbolTable
v-->0
Output
0
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@69c3c095, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->1
Output
0
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@69c3c095, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->1
Output
0
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@69c3c095, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->1
Output
0
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@69c3c095, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
SymbolTable
v-->1
Output
0
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@69c3c095, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
print( VarExpression{name='v'} )
SymbolTable
v-->1
Output
0
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@69c3c095, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
SymbolTable
v-->1
Output
0
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@69c3c095, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->2
Output
0
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@69c3c095, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->2
Output
0
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@69c3c095, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->2
Output
0
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@69c3c095, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
SymbolTable
v-->2
Output
0
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@69c3c095, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
print( VarExpression{name='v'} )
SymbolTable
v-->2
Output
0
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@69c3c095, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
SymbolTable
v-->2
Output
0
0
1
1
2
2
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@69c3c095, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@69c3c095, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@69c3c095
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@459a314a
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@9647f52
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@741da098
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@36329a95
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@1e85f4b
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
CompStmt{first=AssignStmt{expr=ConstantExpression{value=0}, var='v'}, second=CompStmt{first=WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}, second=CompStmt{first=domain.statements.SleepStmt@29526c22, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}}}
SymbolTable
Output
Heap
ExecStack
CompStmt{first=WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}, second=CompStmt{first=domain.statements.SleepStmt@29526c22, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}}
AssignStmt{expr=ConstantExpression{value=0}, var='v'}
SymbolTable
Output
Heap
ExecStack
CompStmt{first=WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}, second=CompStmt{first=domain.statements.SleepStmt@29526c22, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@29526c22, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@29526c22, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@29526c22, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@29526c22, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@29526c22, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
print( VarExpression{name='v'} )
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@29526c22, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
SymbolTable
v-->0
Output
0
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@29526c22, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->1
Output
0
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@29526c22, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->1
Output
0
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@29526c22, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->1
Output
0
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@29526c22, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
SymbolTable
v-->1
Output
0
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@29526c22, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
print( VarExpression{name='v'} )
SymbolTable
v-->1
Output
0
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@29526c22, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
SymbolTable
v-->1
Output
0
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@29526c22, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->2
Output
0
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@29526c22, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->2
Output
0
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@29526c22, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->2
Output
0
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@29526c22, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
SymbolTable
v-->2
Output
0
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@29526c22, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
print( VarExpression{name='v'} )
SymbolTable
v-->2
Output
0
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@29526c22, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
SymbolTable
v-->2
Output
0
0
1
1
2
2
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@29526c22, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@29526c22, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@29526c22
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@56d8077f
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@133ab83b
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@7aa7b69e
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@719c384b
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@4fdf9b22
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
