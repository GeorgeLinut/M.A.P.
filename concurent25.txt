ExecStack
CompStmt{first=AssignStmt{expr=ConstantExpression{value=0}, var='v'}, second=CompStmt{first=WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}, second=CompStmt{first=domain.statements.SleepStmt@2efc3d5, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}}}
SymbolTable
Output
Heap
ExecStack
CompStmt{first=WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}, second=CompStmt{first=domain.statements.SleepStmt@2efc3d5, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}}
AssignStmt{expr=ConstantExpression{value=0}, var='v'}
SymbolTable
Output
Heap
ExecStack
CompStmt{first=WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}, second=CompStmt{first=domain.statements.SleepStmt@2efc3d5, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2efc3d5, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2efc3d5, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2efc3d5, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2efc3d5, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2efc3d5, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
print( VarExpression{name='v'} )
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2efc3d5, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
SymbolTable
v-->0
Output
0
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2efc3d5, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->1
Output
0
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2efc3d5, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->1
Output
0
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2efc3d5, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->1
Output
0
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2efc3d5, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
SymbolTable
v-->1
Output
0
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2efc3d5, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
print( VarExpression{name='v'} )
SymbolTable
v-->1
Output
0
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2efc3d5, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
SymbolTable
v-->1
Output
0
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2efc3d5, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->2
Output
0
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2efc3d5, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->2
Output
0
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2efc3d5, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->2
Output
0
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2efc3d5, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
SymbolTable
v-->2
Output
0
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2efc3d5, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
print( VarExpression{name='v'} )
SymbolTable
v-->2
Output
0
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2efc3d5, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
SymbolTable
v-->2
Output
0
0
1
1
2
2
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2efc3d5, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@2efc3d5, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@2efc3d5
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@641aadc7
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@64cf9519
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@69045173
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@62912e39
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@477926dc
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
CompStmt{first=AssignStmt{expr=ConstantExpression{value=0}, var='v'}, second=CompStmt{first=WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}, second=CompStmt{first=domain.statements.SleepStmt@17ce34a3, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}}}
SymbolTable
Output
Heap
ExecStack
CompStmt{first=WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}, second=CompStmt{first=domain.statements.SleepStmt@17ce34a3, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}}
AssignStmt{expr=ConstantExpression{value=0}, var='v'}
SymbolTable
Output
Heap
ExecStack
CompStmt{first=WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}, second=CompStmt{first=domain.statements.SleepStmt@17ce34a3, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}}
AssignStmt{expr=ConstantExpression{value=0}, var='v'}
SymbolTable
Output
Heap
ExecStack
CompStmt{first=WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}, second=CompStmt{first=domain.statements.SleepStmt@17ce34a3, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}, second=CompStmt{first=domain.statements.SleepStmt@17ce34a3, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@17ce34a3, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@17ce34a3, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@17ce34a3, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@17ce34a3, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@17ce34a3, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@17ce34a3, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@17ce34a3, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@17ce34a3, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@17ce34a3, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
print( VarExpression{name='v'} )
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@17ce34a3, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
print( VarExpression{name='v'} )
SymbolTable
v-->0
Output
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@17ce34a3, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
SymbolTable
v-->0
Output
0
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@17ce34a3, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
SymbolTable
v-->0
Output
0
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@17ce34a3, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->1
Output
0
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@17ce34a3, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->1
Output
0
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@17ce34a3, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->1
Output
0
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@17ce34a3, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->1
Output
0
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@17ce34a3, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->1
Output
0
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@17ce34a3, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->1
Output
0
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@17ce34a3, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
SymbolTable
v-->1
Output
0
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@17ce34a3, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
SymbolTable
v-->1
Output
0
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@17ce34a3, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
print( VarExpression{name='v'} )
SymbolTable
v-->1
Output
0
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@17ce34a3, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
print( VarExpression{name='v'} )
SymbolTable
v-->1
Output
0
0
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@17ce34a3, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
SymbolTable
v-->1
Output
0
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@17ce34a3, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
SymbolTable
v-->1
Output
0
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@17ce34a3, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->2
Output
0
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@17ce34a3, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->2
Output
0
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@17ce34a3, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->2
Output
0
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@17ce34a3, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->2
Output
0
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@17ce34a3, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->2
Output
0
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@17ce34a3, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}
SymbolTable
v-->2
Output
0
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@17ce34a3, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
SymbolTable
v-->2
Output
0
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@17ce34a3, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
SymbolTable
v-->2
Output
0
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@17ce34a3, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
print( VarExpression{name='v'} )
SymbolTable
v-->2
Output
0
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@17ce34a3, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
print( VarExpression{name='v'} )
SymbolTable
v-->2
Output
0
0
1
1
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@17ce34a3, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
SymbolTable
v-->2
Output
0
0
1
1
2
2
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@17ce34a3, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
SymbolTable
v-->2
Output
0
0
1
1
2
2
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@17ce34a3, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@17ce34a3, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
WhileStmt{exp=BooleanExpression{operator='<', operand1=VarExpression{name='v'}, operand2=ConstantExpression{value=3}}, executeStatement=CompStmt{first=ForkStmt{statement=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}, second=CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}}}
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@17ce34a3, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
CompStmt{first=domain.statements.SleepStmt@17ce34a3, second=print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )}
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@17ce34a3
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@17ce34a3
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@4477b738
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@4477b738
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@63199f5f
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@63199f5f
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@3072fab0
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@3072fab0
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@7d15abac
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@7d15abac
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@39e59bad
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
domain.statements.SleepStmt@39e59bad
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
print( ArithmeticExpression{operand1=VarExpression{name='v'}, operator=*, operand2=ConstantExpression{value=10}} )
SymbolTable
v-->3
Output
0
0
1
1
2
2
Heap
ExecStack
SymbolTable
v-->3
Output
0
0
1
1
2
2
30
Heap
ExecStack
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
SymbolTable
v-->0
Output
0
0
0
0
0
0
0
0
0
0
0
0
Heap
ExecStack
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
print( VarExpression{name='v'} )
SymbolTable
v-->0
Output
0
0
0
0
0
0
0
0
0
0
0
0
Heap
ExecStack
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
SymbolTable
v-->0
Output
0
0
0
0
0
0
0
0
0
0
0
0
0
Heap
ExecStack
CompStmt{first=print( VarExpression{name='v'} ), second=AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}}
SymbolTable
v-->0
Output
0
0
0
0
0
0
0
0
0
0
0
0
Heap
ExecStack
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
print( VarExpression{name='v'} )
SymbolTable
v-->0
Output
0
0
0
0
0
0
0
0
0
0
0
0
Heap
ExecStack
AssignStmt{expr=ArithmeticExpression{operand1=VarExpression{name='v'}, operator=+, operand2=ConstantExpression{value=1}}, var='v'}
SymbolTable
v-->0
Output
0
0
0
0
0
0
0
0
0
0
0
0
0
Heap
